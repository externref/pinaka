{
  "config": {
    "lang": ["en"],
    "separator": "[\\s\\-]+",
    "pipeline": ["stopWordFilter"]
  },
  "docs": [
    {
      "location": "",
      "title": "Home",
      "text": "pinaka <p>This is documentation page for the pinaka API.</p>"
    },
    {
      "location": "gita/",
      "title": "bhagavad gita",
      "text": "<p>Shlokas of the Bhagavad Gita are stored as GitaShloka objects.</p> structure of a GitaShloka object <pre><code>{\n\"adhyaya\": 0,\n\"shloka\": 0,\n\"speaker\": \"the speaker of the shloka\",\n\"original\": \"the actual shloka\",\n\"romanised\": \"romanised version of the shloka\",\n\"hindi\": \"hindi translation of the shloka\",\n\"english\": \"english translation of the shloka\"\n}\n</code></pre> view in source <pre><code>@attrs.define(kw_only=True)\nclass GitaShloka:\n    adhyaya: int\n    shloka: int\n    speaker: str\n    original: str\n    romanised: str\n    english: str\n    hindi: str\n</code></pre>"
    },
    { "location": "gita/#endpoints", "title": "Endpoints", "text": "" },
    {
      "location": "gita/#fetching-a-shloka",
      "title": "fetching a shloka",
      "text": "<ul> <li>Endpoint: <code>/bhagavadgita/{adhyaya}/{shloka}</code></li> </ul> <p>Fetches the shloka number from the provided adhyaya number, the shloka and adhyaya number must be positive integer values. If no data for the requested values are found a <code>404</code> status is returned.</p> Examples <p>python: <pre><code>import requests\n\nresponse = requests.get( \"&lt;core endpoint&gt;/bhagavadgita/1/1\")\nif response.status_code == 404:\n    print(\"No data found.\")\nelse:\n    shloka_data: typing.Dict[str, str|int] = response.json()\n    # the shloka_data is now a dictionary that contains all the \n    # shloka class data as keys and values\n</code></pre></p> <p>embedded js <pre><code>const req = new XMLHttpRequest()\nreq.open(\"GET\", \"&lt;core endpoint&gt;/bhagavadgita/1/1\")\nreq.onload = () =&gt; {\nif (req.status === 404) console.log(\"Data not found.\")\nelse {\nlet shlokaData = JSON.parse(req.responseText)\n// the shloka_data is now a dictionary that contains all the \n// shloka class data as keys and values\n}\n}\nreq.send()\n</code></pre></p>"
    },
    {
      "location": "gita/#querying-the-gita",
      "title": "querying the gita",
      "text": "<ul> <li>Endpoint: <code>/bhagavadgita/query</code></li> </ul> <p>fetches multiple shlokas from the API and returns them as a list of Shlokas.</p>"
    },
    {
      "location": "gita/#parameters",
      "title": "PARAMETERS",
      "text": "Param Info Dtype adhyaya Adhyaya from which shlokas are to be fetched int range Range of shlokas to be fetched [int, int] shlokas The shloka number of the shlokas to fetch [int, ...] Examples <p>python <pre><code>import requests\n\nres = requests.post(\n    \"&lt;core endpoint&gt;/bhagavadgita/query\", json={\"adhyaya\": 1, \"range\": [1, 5]}\n)\nres.raise_for_status()\ndata = res.json() # data var stores a list of shloka dictionaries.\n</code></pre> typescript <pre><code>import axios from \"axios\";\n\nconst main = async ()=&gt;{\nvar res =  await axios.post(\"&lt;core endpoint&gt;/bhagavadgita/query\",{\nadhyaya: 1, shlokas: [1, 3, 4, 9]\n})\nconst data = res.data // data stores GitaShloka objects in an array\n}\n\nmain()\n</code></pre></p>"
    },
    {
      "location": "tandava/",
      "title": "shiv tandava",
      "text": "<p>Shlokas from the Shiva Tandava Strotam are stored as TandavaShloka objects.</p> structure of a TandavaShloka object <pre><code>{\n\"shloka\": 1,\n\"original\": \"\u091c\u091f\u093e\u091f\u0935\u0940\u0917\u0932\u091c\u094d\u091c\u0932\u092a\u094d\u0930\u0935\u093e\u0939\u092a\u093e\u0935\u093f\u0924\u0938\u094d\u0925\u0932\u0947\\n\u0917\u0932\u0947\u093d\u0935\u0932\u092e\u094d\u092c\u094d\u092f \u0932\u092e\u094d\u092c\u093f\u0924\u093e\u0902 \u092d\u0941\u091c\u0919\u094d\u0917\u0924\u0941\u0919\u094d\u0917\u092e\u093e\u0932\u093f\u0915\u093e\u092e\u094d \u0964\\n\u0921\u092e\u0921\u094d\u0921\u092e\u0921\u094d\u0921\u092e\u0921\u094d\u0921\u092e\u0928\u094d\u0928\u093f\u0928\u093e\u0926\u0935\u0921\u094d\u0921\u092e\u0930\u094d\u0935\u092f\u0902\\n\u091a\u0915\u093e\u0930 \u091a\u0923\u094d\u0921\u0924\u093e\u0923\u094d\u0921\u0935\u0902 \u0924\u0928\u094b\u0924\u0941 \u0928\u0903 \u0936\u093f\u0935\u0903 \u0936\u093f\u0935\u092e\u094d \u0965\u0967\u0965\",\n\"romanised\": \"Jatatavigalajjala pravahapavitasthale\\nGaleavalambya lambitam bhujangatungamalikam\\nDamad damad damaddama ninadavadamarvayam\\nChakara chandtandavam tanotu nah shivah shivam\"\n}\n</code></pre> view in source <pre><code>@attrs.define(kw_only=True)\nclass TandavaShloka(AttrsClassToPayload):\n    shloka: int\n    original: str\n    romanised: str\n</code></pre>"
    },
    { "location": "tandava/#endpoints", "title": "Endpoints", "text": "" },
    {
      "location": "tandava/#fetching-a-shloka",
      "title": "fetching a shloka",
      "text": "<ul> <li>Endpoint: <code>/shivtandava/{shloka}</code></li> </ul> <p>Fetches a shloka from the API.</p>"
    },
    {
      "location": "tandava/#fetching-the-entire-strotam",
      "title": "fetching the entire strotam",
      "text": "<ul> <li>Endpoint: <code>/shivtandava</code></li> </ul> <p>Entire shloka in form of a list of TandavaShloka objects is returned.</p> Examples <p>python: <pre><code>import requests\n\nresponse = requests.get(\"&lt;core endpoint&gt;/shivtandava\")\nif response.status_code == 404:\n    print(\"No data found.\")\nelse:\n    shloka_data: dict[str, str | int] = response.json()\n    # the shloka_data is now a dictionary that contains all the\n    # shloka class data as keys and values\n</code></pre></p> <p>embedded js <pre><code>const req = new XMLHttpRequest()\nreq.open(\"GET\", \"&lt;core endpoint&gt;/shivtandava\")\nreq.onload = () =&gt; {\nif (req.status === 404) console.log(\"Data not found.\")\nelse {\nlet shlokaData = JSON.parse(req.responseText)\n// the shloka_data is now a dictionary that contains all the \n// shloka class data as keys and values\n}\n}\nreq.send()\n</code></pre></p>"
    }
  ]
}
